# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
from collections import deque
class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        if not root:
            return ""
        def bfs(root):
            result = []
            queue = deque([root])
            result.append(str(root.val))
            while queue:
                for _ in range(len(queue)):
                    node = queue.popleft()
                    if not node:
                        continue
                    queue.append(node.left)
                    queue.append(node.right)
                if not any(queue):
                    continue
                for node in queue:
                    if not node:
                        result.append("null")
                    else:
                        result.append(str(node.val))
            return result
        return ",".join(bfs(root))
        

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        if not data:
            return None
        helper = data.split(",")
        
        def create(ind):
            nonlocal helper
            if ind > len(helper)-1:
                return None
            root = TreeNode(helper[ind])
            root.left = create(2*ind+1)
            root.right = create(2*ind+2)
            return root
        
        return create(0)
        

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))
